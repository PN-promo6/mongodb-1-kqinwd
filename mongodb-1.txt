Exercice 1:
Rédigez la commande permettant de créer une base MongoDB nommée “twisted_db”

use twisted_db

// afficher la liste des bases de données
show databases


Exercice 2:
Rédigez la commande permettant d’afficher en console toutes les bases MongoDB

show databases

// Créer une collection nommée "users" 
db.createCollection("users")


Exercice 3:
Rédigez les commandes permettant de :
créer une base nommée “crooked_db”
créer, dans cette base, une collection nommée “users”
d’afficher en console toutes les bases

// Créer une base de données
use crooked_db

// Créer une collection nommée "users" 
db.createCollection("users")

// Afficher les collections
show collections

// Afficher toutes les DB
show databases

Exercice 4:
Rédigez les commandes permettant de :
créer une base nommée “fake_db”
créer, dans cette base, une collection nommée “fake_users”
créer, dans cette base, une collection nommée “fake_customers”
afficher la liste des collections de la base “crooked_db”

// Créer une base de données
use fake_db

// Créer des collections
db.createCollection("fake_users") 
db.createCollection("fake_customers")

// Afficher les collections
show collections


Exercice 5:
Rédigez les commandes permettant d’insérer dans la collection nommée “fake_users” le document stockant les informations suivantes :
Un utilisateur nommé “Mick”, habitant à “Chicago”, ayant 64 ans

// Insérer un document dans la collection "fake_users"
db.fake_users.insert({name:"Mick", city:"Chicago", age:64})


// Insérer un JSON dans la collection "wrc_drivers" de la DB "wrc"
mongoimport --db wrc --collection wrc_drivers --file /home/val/Bureau/wrc-drivers.json --jsonArray


Exercice 6:
Rédigez les commandes permettant de :
Créer une base nommée “magic_db”
Créer, dans cette base, une collection nommée “magic_users”
Insérer un document correspondant à un utilisateur nommé “Johnson”
Récupérer la liste des documents contenus dans cette collection

use magic_db

db.createCollection("magic_users")
db.magic_users.insert({name:"Johnson"})

// Récupérer la liste des documents dans la collection
db.magic_users.find()


Exercice 7:
Rédigez les commandes permettant :
D’ajouter dans la base “magic_db”, une collection nommée “magic_products”
D’insérer un document correspondant à un produit nommé “Crazy wine”
D’insérer un document correspondant à un produit nommé “Weird shoes”
Récupérer la liste des documents contenus dans cette collection 
Récupérer un seul des documents contenus dans cette collection

db.createCollection("magic_products")
db.magic_products.insert({name:"Crazy wine"})
db.magic_products.insert({name:"Weird shoes"})
db.magic_products.find()

//Récupérer un seul document dans la collection
db.magic_products.findOne()


Exercice 8: 
Rédigez les commandes permettant de :
Sélectionner la base nommée “magic_db”
Afficher de manière lisible tous les documents contenus dans la collection “magic_users” de cette base

use magic_db
db.magic_users.find().pretty()


Exercice 9:
En imaginant que vous soyez en train de travailler sur une collection nommée “users”, comment récupérer l’ensemble des documents correspondant aux utilisateurs dont l’age est de 20 ans ?

Note : On suppose qu’une propriété nommée “age” existe dans ces documents, et que cette propriété est de type Entier

db.users.find({"age":20})


Exercice 10:
En imaginant que vous soyez en train de travailler sur une collection nommée “products”, comment récupérer l’ensemble des documents correspondant aux produits répondant aux critères suivant :
les produits sont en vente
les produits coûtent 100 euros

db.products.find({"on_sale":true, "price":100})


Exercice 11:
Rédigez la commande permettant de récupérer tous les groupes composés d’un membre nommé “Eleni”.

db.bands.find({"members": "Eleni"})


Exercice 12:
Rédigez la commande permettant de récupérer tous les groupes composés d’un membre nommé “Eleni” OU “Doll”

db.bands.find({"members":{$in:["Eleni","Doll"]}})


Exercice 13:
Rédigez la commande permettant de récupérer tous les groupes qui ont été créés avant 2010.

db.bands.find({"creation_date":{$lt:2010}})


Exercice 14:
Rédigez la commande permettant de récupérer tous les groupes qui ont été créés après 2010 et qui sont situés à Coimbra.

db.bands.find({"creation_date":{$gt:2010}, "adress.city":"Coimbra"})


Exercice 15:
Dans une collection nommée players, comment récupérer tous les documents possédant une propriété team dont la valeur est la chaîne de caractère "Seattle Supersonics"

db.players.find({"team": "Seattle Supersonics")

Exercice 16:
Dans une collection nommée players, comment récupérer tous les documents possédant une propriété jerseyNumber dont la valeur est l’entier 40

db.players.find({"jerseyNumber": 40})


Exercice 17:
Dans une collection nommée players, comment récupérer tous les documents possédant une propriété previousTeams dont la valeur, qui est un tableau de chaînes de caractères, contient la chaîne "Chicago Bulls"

db.players.find({"previousTeams": "Chicago Bulls"})


Exercice 18:
Dans une collection nommée players, comment récupérer tous les documents possédant une propriété previousTeams dont la valeur, qui est un tableau de chaînes de caractères, contient la chaîne "Chicago Bulls" ou la chaîne "Miami Heat"

db.players.find({"previousTeams":{$in:["Chicago Bulls", "Miami Heat"]}})


Exercice 19:
Dans une collection nommée players, comment récupérer tous les documents possédant une propriété previousTeams dont la valeur, qui est un tableau de chaînes de caractères, contient la chaîne "Orlando Magic" et la chaîne "New York Knicks"

db.players.find({"previousTeams":{$all:["Orlando Magic", "New York Knicks"]}})


Exercice 20:
 Dans une collection nommée players, comment récupérer tous les documents possédant une propriété age dont la valeur est un entier supérieur à 30

db.players.find({"age":{$gt:30}})


Exercice 21:
Dans une collection nommée players, comment récupérer tous les documents possédant une propriété birthPlace, qui elle-même possède une propriété country dont la valeur est une chaîne de caractères ayant pour valeur "Spain"

db.players({"birthPlace.country": "Spain"})



------------------------------------------------------------------
Exercices en lignes
https://www.w3resource.com/mongodb-exercises/#PracticeOnline

Exercice 1:
Write a MongoDB query to display all the documents in the collection restaurants.

use restaurants_db
mongoimport --db restaurants_db --collection restaurants --file /home/val/Bureau/restaurants.json
db.restaurants.find()


Exercice 2:
Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.

db.restaurants.find({},{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1})


Exercice 3:
Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant.

db.restaurants.find({},{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1, "_id":0})


Exercice 4:
 Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection restaurant

db.restaurants.find({},{"restaurant_id" : 1,"name":1,"borough":1,"address.zipcode" :1, "_id":0}).pretty()


Exercice 5:
Write a MongoDB query to display all the restaurant which is in the borough Bronx.

db.restaurants.find({"borough": "Bronx"})


Exercice 6:
Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx.

db.restaurants.find({"borough": "Bronx"}).limit(5).pretty()


Exercice 7:
Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx

db.restaurants.find({"borough": "Bronx"}).skip(5).limit(5).pretty()


Exercice 8:
Write a MongoDB query to find the restaurants who achieved a score more than 90.

// Mauvaise version
db.restaurants.find({"grades.score":{$gt:90}})

// Correction
db.restaurants.find({"grades": {$elemMatch:{"score":{$gt: 90}}}}).pretty()


Exercice 9:
Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100.

db.restaurants.find({"grades":{$elemMatch:{"score":{$gt:80, $lt:100}}}}).pretty()


Exercice 10:
Write a MongoDB query to find the restaurants which locate in latitude value less than -95.754168.

db.restaurants.find({"address.coord":{$lt:-95.754168}}).pretty()


Exercice 11:
 Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168.

db.restaurants.find({ $and:[
            { "cuisine":{ $ne :"American " }},
            {"grades.score":{$gt : 70}},
            {"address.coord":{$lt : -65.754168}}
        ]
     }).pretty()


Exercice 12:
Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168.
Note : Do this query without using $and operator. 

db.restaurants.find({
                     "cuisine":{$ne:"American"},
                     "grades.score":{$gt: 70},
                     "address.coord":{$lt : -65.754168}}
                     ).pretty()


Exercice 13:
Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order.

db.restaurants.find({
			"cuisine":{$ne:"American"},
			"grades.grade":"A",
			"borough":{$ne: "Brooklyn"}
			}).sort({"cuisine":-1}).pretty()


Exercice 14:
Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name.

db.restaurants.find({"name": /^Wil/}, {"restaurant_id":1, "name":1, "borough":1, "cuisine" :1}).pretty()
